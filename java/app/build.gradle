apply plugin: 'com.android.application'
apply plugin: 'fullstory'



android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    dataBinding {
        enabled = true
    }
    defaultConfig {
        applicationId "com.fullstorydev.shoppedemo"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 10
        versionName "1.0.10"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        signingConfigs {
            release {
                keyAlias 'androiddebugkey'
                keyPassword 'android'
                storeFile file(System.getenv('HOME') + '/.android/debug.keystore')
                storePassword 'android'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:$rootProject.appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintlayout_version"
    implementation "androidx.navigation:navigation-fragment:$rootProject.nav_version"
    implementation "androidx.navigation:navigation-ui:$rootProject.nav_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycle_version"
    implementation "androidx.room:room-runtime:$rootProject.room_version"
    annotationProcessor "androidx.room:room-compiler:$rootProject.room_version"
    implementation "androidx.multidex:multidex:$rootProject.multidex_version"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.okhttp_version"
    implementation "com.google.code.gson:gson:$rootProject.gson_version"
    implementation "com.google.android.material:material:$rootProject.material_version"
    implementation "com.github.bumptech.glide:glide:$rootProject.glide_version"

    testImplementation "junit:junit:$rootProject.junit_version"
    testImplementation "androidx.room:room-testing:$rootProject.room_version"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espresso_version"
}

Properties properties = new Properties()
if (project.rootProject.file('local.properties').canRead()) {
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
}

fullstory {
    // add your "org" in local.properties, or set it here directly
    org properties.getProperty('org')
    if(org == null) throw new GradleException('ORG ID is empty, will not record! Please set org in build.gradle(app) or local.properties!')

    // enable variants that you want to be instrumented by FS ( default to 'release' if not set )
    if(properties.getProperty('enabledVariants') != null) {
        enabledVariants properties.getProperty('enabledVariants')
    }
    // remove below line if you intend to instrument FS to only release builds
    if(enabledVariants == null) throw new GradleException('enabledVariants is empty, will only record for release builds! If this is intentional, please remove this GradleException in build.gradle(app), otherwise please enabled debug!')

    // please do not set server value here or in local.properties
    if(properties.getProperty('server') != null){
        server properties.getProperty('server')
    }
}