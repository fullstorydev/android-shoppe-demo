apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'fullstory'

android {
    compileSdkVersion rootProject.compilesdk_version
    buildToolsVersion rootProject.build_tools_version

    defaultConfig {
        applicationId "com.fullstorydev.shoppedemo"
        minSdkVersion rootProject.minsdk_version
        targetSdkVersion rootProject.targetsdk_version
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.kotlin_version"
    implementation "androidx.appcompat:appcompat:$rootProject.appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraint_layout_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycle_view_model_version"
    implementation "androidx.room:room-runtime:$rootProject.room_version"
    implementation "androidx.room:room-ktx:$rootProject.room_version"
    implementation "androidx.multidex:multidex:$rootProject.multidex_version"
    kapt "androidx.room:room-compiler:$rootProject.room_version"

    testImplementation "junit:junit:$rootProject.junit_version"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.test_ext_junit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espresso_version"
}

Properties properties = new Properties()
if (project.rootProject.file('local.properties').canRead()) {
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
}

fullstory {
    // add your "org" in local.properties, or set it here directly
    org properties.getProperty('org')
    if(org == null) throw new GradleException('ORG ID is empty, will not record! Please set org in build.gradle(app) or local.properties!')

    // enable variants that you want to be instrumented by FS ( default to 'release' if not set )
    if(properties.getProperty('enabledVariants') != null) {
        enabledVariants properties.getProperty('enabledVariants')
    }
    // remove below line if you intend to instrument FS to only release builds
    if(enabledVariants == null) throw new GradleException('enabledVariants is empty, will only record for release builds! If this is intentional, please remove this GradleException in build.gradle(app), otherwise please enabled debug!')

    // please do not set server value here or in local.properties
    if(properties.getProperty('server') != null){
        server properties.getProperty('server')
    }
}